<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" integrity="sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB"
        crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="css/style.css">
    <link rel="stylesheet" href="../public/css/style.css">


    <title>Mindfulness</title>
</head>

<body>
<div class="jumbotron container mt-4 border border-primary rounded" id="section4">
    <h5 class="display-4 text-center">
      <i class="fas fa-book-open text-primary"></i> My<span class="text-primary"></span>Goals</h5>
      <form id="book-form">
        <div class="form-group">
          <label for="title" >Category</label>
          <input type="text" id="title" class="form-control">
        </div>
        <div class="form-group">
          <label for="author">Your goals</label>
          <input type="text" id="author" class="form-control">
        </div>
        <div class="form-group">
          <label for="isbn">Target Days</label>
          <input type="text" id="isbn" class="form-control">
        </div>
        <input type="submit" value="Add Goals" class="btn btn-primary btn-block">
      </form>
      <table class="table table-striped mt-5">
        <thead>
          <tr>
            <th >category</th>
            <th >Goals</th>
            <th >Date</th>
            <th></th>
          </tr>
        </thead>
        <tbody id="book-list"></tbody>
      </table>
  </div>



  <script>
      // Book Class: Represents a Book
        class Book {
        constructor(title, author, isbn) {
        this.title = title;
        this.author = author;
        this.isbn = isbn;
        }
        }

        // UI Class: Handle UI Tasks
        class UI {
        static displayBooks() {
        const books = Store.getBooks();

        books.forEach((book) => UI.addBookToList(book));
        }

        static addBookToList(book) {
        const list = document.querySelector('#book-list');

        const row = document.createElement('tr');

        row.innerHTML = `
        <td>${book.title}</td>
        <td>${book.author}</td>
        <td>${book.isbn}</td>
        <td><a href="#" class="btn btn-danger btn-sm delete">X</a></td>

        `;

        list.appendChild(row);
        }

        static deleteBook(el) {
        if(el.classList.contains('delete')) {
        el.parentElement.parentElement.remove();
        }
        }

        static showAlert(message, className) {
        const div = document.createElement('div');
        div.className = `alert alert-${className}`;
        div.appendChild(document.createTextNode(message));
        const container = document.querySelector('.container');
        const form = document.querySelector('#book-form');
        container.insertBefore(div, form);

        // Vanish in 3 seconds
        setTimeout(() => document.querySelector('.alert').remove(), 3000);
        }

        static clearFields() {
        document.querySelector('#title').value = '';
        document.querySelector('#author').value = '';
        document.querySelector('#isbn').value = '';
        }
        }

        // Store Class: Handles Storage
        class Store {
        static getBooks() {
        let books;
        if(localStorage.getItem('books') === null) {
        books = [];
        } else {
        books = JSON.parse(localStorage.getItem('books'));
        }

        return books;
        }

        static addBook(book) {
        const books = Store.getBooks();
        books.push(book);
        localStorage.setItem('books', JSON.stringify(books));
        }

        static removeBook(isbn) {
        const books = Store.getBooks();

        books.forEach((book, index) => {
        if(book.isbn === isbn) {
            books.splice(index, 1);
        }
        });

        localStorage.setItem('books', JSON.stringify(books));
        }
        }

        // Event: Display Books
        document.addEventListener('DOMContentLoaded', UI.displayBooks);

        // Event: Add a Book
        document.querySelector('#book-form').addEventListener('submit', (e) => {
        // Prevent actual submit
        e.preventDefault();

        // Get form values
        const title = document.querySelector('#title').value;
        const author = document.querySelector('#author').value;
        const isbn = document.querySelector('#isbn').value;

        // Validate
        if(title === '' || author === '' || isbn === '') {
        UI.showAlert('Please fill in all fields', 'danger');
        } else {
        // Instatiate book
        const book = new Book(title, author, isbn);

        // Add Book to UI
        UI.addBookToList(book);

        // Add book to store
        Store.addBook(book);

        // Show success message
        UI.showAlert('Goal Added', 'success');

        // Clear fields
        UI.clearFields();
        }
        });

        // Event: Remove a Book
        document.querySelector('#book-list').addEventListener('click', (e) => {
        // Remove book from UI
        UI.deleteBook(e.target);

        // Remove book from store
        Store.removeBook(e.target.parentElement.previousElementSibling.textContent);

        // Show success message
        UI.showAlert('Goal Removed', 'warning');
        });
</script>

<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49"
crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js" integrity="sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T"
crossorigin="anonymous"></script>

</body>
</html>